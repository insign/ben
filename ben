#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :script.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ben_usage() {
  if [[ -n $long_usage ]]; then
    printf "ben - Simple benchmarking using shell\n"
    echo

  else
    printf "ben - Simple benchmarking using shell\n"
    echo

  fi

  printf "Usage:\n"
  printf "  ben [command]\n"
  printf "  ben [command] --help | -h\n"
  printf "  ben --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  all   Run all available benchmarking tests"
  echo "  dns   Do a DNS benchmark"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
ben_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "ben all - Run all available benchmarking tests\n"
    echo

  else
    printf "ben all - Run all available benchmarking tests\n"
    echo

  fi

  printf "Usage:\n"
  printf "  ben all\n"
  printf "  ben all --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ben_dns_usage() {
  if [[ -n $long_usage ]]; then
    printf "ben dns - Do a DNS benchmark\n"
    echo

  else
    printf "ben dns - Do a DNS benchmark\n"
    echo

  fi

  printf "Shortcut: d\n"
  echo

  printf "Usage:\n"
  printf "  ben dns [HOST] [options]\n"
  printf "  ben dns --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --popular"
    printf "    Test only with most popular DNS servers\n"
    echo

    # :flag.usage
    echo "  --json"
    printf "    Returns a json instead human-readable text\n"
    echo

    # :flag.usage
    echo "  --lowest"
    printf "    Returns only the lowest measured result\n"
    echo

    # :flag.usage
    echo "  --rounds"
    printf "    How many times repeat the test before choose a winner\n"
    printf "    Default: 3\n"
    echo

    # :flag.usage
    echo "  --sleep"
    printf "    How many secods to wait beetween rounds\n"
    printf "    Default: 1s\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  HOST"
    printf "    test against a specific host\n"
    printf "    Default: wikipedia.org\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"

    printf "  ben dns\n"
    printf "  ben dns msn.com\n"
    printf "  ben d example.com\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
ben_all_command() {
  # :src/all_command.sh
  echo "# this file is located in 'src/all_command.sh'"
  echo "# code for 'bensh all' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
ben_dns_command() {
  # :src/dns_command.sh
  set -f
  IFS=,
  winners=()
  lowest_server_time=10000

  get_split() {
  	string=$1
  	separator=$2
  	position=$3

  	echo "$string" | cut -d"$separator" -f"$position"
  }

  # shellcheck disable=SC2154
  for ((round = 1; round < ${args[--rounds]} + 1; round++)); do
  	echo "Round $round"
  	sleep "${args[--sleep]}"

  	while read -r DNS; do
  		if [ -n "$DNS" ]; then
  			dns=($DNS)
  			server_ip=${dns[0]}
  			server_name=${dns[1]}
  			# shellcheck disable=SC2154
  			server_time=$(dig @"${server_ip}" -q "${args[host]}" +noall +stats | sed -nEz 's/.*;; Query time:\s([^\n]*).*.msec.*/\1/p')

  			printf "%15s%12s%5dms\n" "$server_ip" "$server_name" "$server_time"
  			if [ "${server_time}" -lt $lowest_server_time ]; then
  				lowest_server_time=$server_time
  				lowest_server_ip=$server_ip
  				lowest_server_name=$server_name
  			fi
  		fi
  	done <./ipv4.csv

  	winners+=("$round,$lowest_server_ip,$lowest_server_name,$lowest_server_time")

  done
  for i in "${winners[@]}"; do
  	winner=($i)
  	round=${winner[0]}
  	ip=${winner[1]}
  	name=${winner[2]}
  	time=${winner[3]}

  	printf "Round %s: %5s%12s%5dms\n" "$round" "$ip" "$name" "$time"
  done

  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    ben_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  all )
    action="all"
    shift
    ben_all_parse_requirements "$@"
    shift $#
    ;;

  dns | d )
    action="dns"
    shift
    ben_dns_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    ben_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
ben_all_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    ben_all_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="all"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
}

# :command.parse_requirements
ben_dns_parse_requirements() {
  # :command.fixed_flag_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    ben_dns_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="dns"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --popular )
      args[--popular]=1
      shift
      ;;

    # :flag.case
    --json )
      args[--json]=1
      shift
      ;;

    # :flag.case
    --lowest )
      args[--lowest]=1
      shift
      ;;

    # :flag.case
    --rounds )
      args[--rounds]=1
      shift
      ;;

    # :flag.case
    --sleep )
      args[--sleep]=1
      shift
      ;;

    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      if [[ -z ${args[host]+x} ]]; then
        # :argument.validations
        args[host]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  [[ -n ${args[host]:-} ]] || args[host]="wikipedia.org"
  [[ -n ${args[--rounds]:-} ]] || args[--rounds]="3"
  [[ -n ${args[--sleep]:-} ]] || args[--sleep]="1s"
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "all" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      ben_all_usage
    else
      ben_all_command
    fi

  elif [[ $action == "dns" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      ben_dns_usage
    else
      ben_dns_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
